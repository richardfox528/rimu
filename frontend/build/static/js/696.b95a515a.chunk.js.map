{"version":3,"file":"static/js/696.b95a515a.chunk.js","mappings":"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","sources":["pages/VerifyEmailRedirect.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { getApiUrl } from \"../utils/config\";\r\nimport { setCookie, getCookie } from \"../utils/cookieUtils\";\r\nimport Cookies from \"js-cookie\";\r\n\r\n/**\r\n * Component that handles email verification through the token received in the URL\r\n * and sends the request to the backend for processing.\r\n */\r\nconst VerifyEmailRedirect = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [message, setMessage] = useState(\"Verifying your email...\");\r\n  const [status, setStatus] = useState(\"loading\"); // 'loading', 'success', 'error'\r\n  const [userEmail, setUserEmail] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Extract token and user_id from the current URL\r\n    const params = new URLSearchParams(location.search);\r\n    const rawToken = params.get(\"token\");\r\n    const userId = params.get(\"user_id\");\r\n    const userEmail = params.get(\"email\"); // Extract email from URL if present\r\n\r\n    // Clean the token to avoid spaces and other unwanted characters\r\n    const token = rawToken ? rawToken.trim().replace(/\\s+/g, \"\") : null;\r\n\r\n    console.log(\"Token extracted from URL:\", rawToken);\r\n    console.log(\"Cleaned token:\", token);\r\n    console.log(\"User ID:\", userId);\r\n    console.log(\"User Email:\", userEmail);\r\n\r\n    if (!token) {\r\n      // If there's no token, redirect to the manual verification page\r\n      setStatus(\"error\");\r\n      setMessage(\"You have not verified your email\");\r\n      setTimeout(() => {\r\n        navigate(\"/auth/email-verification\");\r\n      }, 5000);\r\n      return;\r\n    }\r\n\r\n    // Verify the token by sending it to the backend\r\n    const verifyToken = async () => {\r\n      try {\r\n        console.log(\"Starting verification with token:\", token);\r\n        console.log(\"User ID:\", userId);\r\n        console.log(\"API URL:\", getApiUrl(\"api/accounts/verify-email/\"));\r\n\r\n        // Prepare data for verification, including user_id if available\r\n        const verificationData = { verification_code: token };\r\n        if (userId) {\r\n          verificationData.user_id = userId;\r\n        }\r\n        // If we have email from URL, include it in verification data\r\n        if (userEmail) {\r\n          verificationData.email = userEmail;\r\n          setUserEmail(userEmail);\r\n        }\r\n\r\n        console.log(\"Clean verification data:\", verificationData);\r\n\r\n        // Send the token to the backend verification endpoint\r\n        const response = await axios.post(\r\n          getApiUrl(\"api/accounts/verify-email/\"),\r\n          verificationData,\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            timeout: 10000, // 10 seconds timeout\r\n          }\r\n        );\r\n\r\n        console.log(\"Verification response:\", response.data);\r\n\r\n        if (response.data.success) {\r\n          setStatus(\"success\");\r\n          setMessage(\"¡Email successfully verified!\");\r\n\r\n          // Guardar información del usuario\r\n          let userInfo = null;\r\n          let userType = null;\r\n\r\n          // Si el backend devuelve información del usuario directamente\r\n          if (response.data.user) {\r\n            userType = response.data.user.user_type;\r\n            localStorage.setItem(\"userType\", userType);\r\n\r\n            // Crear objeto userInfo si no existe\r\n            userInfo = {\r\n              id: response.data.user.id,\r\n              email: response.data.user.email,\r\n              user_type: userType,\r\n            };\r\n\r\n            // Guardar en localStorage\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\r\n          }\r\n\r\n          // Save token if included in the response\r\n          if (response.data.token) {\r\n            // Use cookies with consistent configuration\r\n            const cookieOptions = {\r\n              expires: 1,\r\n              path: \"/\",\r\n              sameSite: \"Lax\",\r\n              secure: window.location.protocol === \"https:\",\r\n            };\r\n\r\n            // Set cookies using both methods to ensure compatibility\r\n            setCookie(\"token\", response.data.token, 1);\r\n            Cookies.set(\"token\", response.data.token, cookieOptions);\r\n\r\n            // Remove any token from localStorage to avoid confusion\r\n            localStorage.removeItem(\"token\");\r\n\r\n            console.log(\"Token saved in cookies:\", response.data.token);\r\n          }\r\n\r\n          // If the token wasn't in the response, check the cookies\r\n          const existingToken = getCookie(\"token\");\r\n          console.log(\"Existing token in cookies:\", existingToken);\r\n\r\n          if (!existingToken && !response.data.token) {\r\n            console.log(\"No token found - redirecting to login\");\r\n\r\n            // Save verification state in localStorage for login to detect\r\n            localStorage.setItem(\"emailVerified\", \"true\");\r\n\r\n            if (userId) {\r\n              localStorage.setItem(\"verifiedUserId\", userId);\r\n            }\r\n\r\n            navigate(\"/login\", {\r\n              state: {\r\n                message: \"Successful verification. Please log in to continue.\",\r\n                verified: true,\r\n                user_id: userId,\r\n              },\r\n            });\r\n            return;\r\n          }\r\n\r\n          // Get updated user information from the server\r\n          try {\r\n            const token = response.data.token || existingToken;\r\n\r\n            console.log(\"Token to use for info:\", token);\r\n            const userResponse = await axios.get(\r\n              getApiUrl(\"api/accounts/user/info/\"),\r\n              {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n              }\r\n            );\r\n\r\n            console.log(\"User information response:\", userResponse.data);\r\n\r\n            // Verify if the response contains user data\r\n            let userInfo = null;\r\n\r\n            if (userResponse.data) {\r\n              if (userResponse.data.user) {\r\n                userInfo = userResponse.data.user;\r\n                console.log(\"Using data.user:\", userInfo);\r\n              } else if (userResponse.data.id) {\r\n                userInfo = userResponse.data;\r\n                console.log(\"Using data directly:\", userInfo);\r\n              } else if (userResponse.data.success) {\r\n                userInfo = userResponse.data.data || {};\r\n                console.log(\"Using data.data:\", userInfo);\r\n              }\r\n\r\n              if (userInfo) {\r\n                // Save complete information\r\n                localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\r\n                console.log(\"Information saved in localStorage:\", userInfo);\r\n                console.log(\"user_type:\", userInfo.user_type);\r\n              }\r\n            }\r\n\r\n            if (!userInfo) {\r\n              console.warn(\"Could not obtain valid user information\");\r\n              throw new Error(\"Invalid user data\");\r\n            }\r\n\r\n            // Esperar 15 segundos y luego redirigir al dashboard\r\n            setTimeout(() => {\r\n              // Determinar el tipo de usuario y redirigir al dashboard correspondiente\r\n\r\n              // Prueba directamente los tipos como strings primero\r\n              if (userInfo.user_type === \"1\" || userInfo.user_type === 1) {\r\n                navigate(\"/company-dashboard\");\r\n                return;\r\n              }\r\n\r\n              if (userInfo.user_type === \"2\" || userInfo.user_type === 2) {\r\n                navigate(\"/user-dashboard\");\r\n                return;\r\n              }\r\n\r\n              // Enfoque de conversión numérica como respaldo\r\n              const userType = Number(userInfo.user_type);\r\n              if (!isNaN(userType)) {\r\n                if (userType === 1) {\r\n                  navigate(\"/company-dashboard\");\r\n                } else {\r\n                  navigate(\"/user-dashboard\");\r\n                }\r\n              } else {\r\n                navigate(\"/login\");\r\n              }\r\n            }, 5000); // 5 segundos de espera\r\n          } catch (userError) {\r\n            console.error(\"Error getting user information:\", userError);\r\n            navigate(\"/login\", {\r\n              state: {\r\n                message: \"Successful verification. Please log in to continue.\",\r\n                verified: true,\r\n              },\r\n            });\r\n          }\r\n        } else {\r\n          throw new Error(response.data.error || \"Error verifying email\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error verifying token:\", error);\r\n        const errorData = {\r\n          message: error.message,\r\n          response: error.response\r\n            ? {\r\n                status: error.response.status,\r\n                data: error.response.data,\r\n              }\r\n            : \"No response data\",\r\n          request: error.request ? \"Request exists\" : \"No request data\",\r\n        };\r\n        console.log(\"Error details:\", JSON.stringify(errorData, null, 2));\r\n\r\n        // Show more detailed message to the user\r\n        const errorMsg =\r\n          error.response?.data?.error ||\r\n          error.response?.data?.detail ||\r\n          \"Could not verify email. The code may be invalid or expired.\";\r\n\r\n        setStatus(\"error\");\r\n        setMessage(errorMsg);\r\n\r\n        // Redirect to the manual verification page for the user to try again\r\n        setTimeout(() => {\r\n          navigate(\"/auth/email-verification\", {\r\n            state: {\r\n              error: errorMsg,\r\n              token: token,\r\n              user_id: userId,\r\n            },\r\n          });\r\n        }, 5000); // 5 segundos de espera\r\n      }\r\n    };\r\n\r\n    verifyToken();\r\n  }, [location, navigate]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-md max-w-md w-full\">\r\n        <div className=\"flex flex-col items-center\">\r\n          {status === \"loading\" && (\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mb-4\"></div>\r\n          )}\r\n          {status === \"success\" && (\r\n            <div className=\"text-center\">\r\n              <div className=\"mb-6\">\r\n                <svg\r\n                  className=\"w-16 h-16 text-green-500 mx-auto\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M5 13l4 4L19 7\"\r\n                  ></path>\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n                ¡Email verificado correctamente!\r\n              </h2>\r\n              <p className=\"text-gray-600 mb-4\">\r\n                Tu cuenta ha sido verificada. Ahora puedes acceder a todas las\r\n                funciones de la plataforma.\r\n              </p>\r\n\r\n              {userEmail && (\r\n                <div className=\"mb-6 p-3 bg-gray-50 border border-gray-100 rounded-md\">\r\n                  <p className=\"text-sm text-gray-700\">\r\n                    Cuenta verificada para:\r\n                  </p>\r\n                  <p className=\"font-medium text-indigo-600\">{userEmail}</p>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"mt-4 py-2 px-4 bg-gray-100 rounded-md\">\r\n                <p className=\"text-gray-700\">Redirigiendo al panel...</p>\r\n                <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2.5\">\r\n                  <div className=\"bg-indigo-600 h-2.5 rounded-full animate-pulse w-full\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {status === \"error\" && (\r\n            <svg\r\n              className=\"h-12 w-12 text-yellow-500 mb-4\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\r\n              />\r\n            </svg>\r\n          )}\r\n          <h2 className=\"text-xl text-gray-700 text-center\">{message}</h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerifyEmailRedirect;\r\n"],"names":["VerifyEmailRedirect","location","useLocation","navigate","useNavigate","message","setMessage","useState","status","setStatus","userEmail","setUserEmail","useEffect","params","URLSearchParams","search","rawToken","get","userId","token","trim","replace","console","log","setTimeout","async","getApiUrl","verificationData","verification_code","user_id","email","response","axios","post","headers","timeout","data","success","Error","error","userInfo","userType","user","user_type","localStorage","setItem","id","JSON","stringify","cookieOptions","expires","path","sameSite","secure","window","protocol","setCookie","Cookies","set","removeItem","existingToken","getCookie","state","verified","userResponse","Authorization","warn","Number","isNaN","userError","_error$response","_error$response$data","_error$response2","_error$response2$data","errorData","request","errorMsg","detail","verifyToken","_jsx","className","children","_jsxs","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d"],"sourceRoot":""}