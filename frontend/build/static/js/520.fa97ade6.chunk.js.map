{"version":3,"file":"static/js/520.fa97ade6.chunk.js","mappings":"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","sources":["templates/EmailVerification.js","pages/EmailVerification.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { getApiUrl } from \"../utils/config.js\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport Cookies from 'js-cookie';\nimport appConfig from \"../config/appConfig\";\n\nexport const EmailVerificationTemplate = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Email Verification</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background-color: #4F46E5; color: white; padding: 20px; text-align: center; border-radius: 5px 5px 0 0; }\n    .content { padding: 20px; border: 1px solid #ddd; border-top: none; border-radius: 0 0 5px 5px; }\n    .button { display: inline-block; background-color: #4F46E5; color: white; text-decoration: none; padding: 10px 20px; border-radius: 5px; margin-top: 20px; }\n    .footer { margin-top: 20px; font-size: 12px; color: #777; text-align: center; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>Email Verification</h1>\n  </div>\n  <div class=\"content\">\n    <p>Hello,</p>\n    <p>Thank you for registering with ${appConfig.APP_NAME}. To verify your email address, please click the button below:</p>\n    <p style=\"text-align: center;\">\n      <a href=\"{{verification_link}}\" class=\"button\" style=\"color: white;\">Verify Email</a>\n    </p>\n    <p>Alternatively, you can use this verification code: <strong>{{verification_code}}</strong></p>\n    <p>If you did not create an account, you can safely ignore this email.</p>\n    <p>Best regards,<br>The ${appConfig.APP_NAME} Team</p>\n  </div>\n  <div class=\"footer\">\n    <p>This is an automatic email, please do not reply to this message.</p>\n  </div>\n</body>\n</html>\n`;\n\nconst EmailVerification = () => {\n  const [verificationStatus, setVerificationStatus] = useState(\"pending\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [manualCode, setManualCode] = useState(\"\");\n  const [resendingEmail, setResendingEmail] = useState(false);\n  const [message, setMessage] = useState(\"Verifying your email...\");\n  const [resendTimer, setResendTimer] = useState(0);\n  const [codeError, setCodeError] = useState(\"\");\n  const [remainingAttempts, setRemainingAttempts] = useState(3);\n  const [showCaptcha, setShowCaptcha] = useState(false);\n  const [captchaToken, setCaptchaToken] = useState(\"\");\n  const [recaptchaKey, setRecaptchaKey] = useState(\"\");\n  const [extraAttemptsUsed, setExtraAttemptsUsed] = useState(false);\n  const recaptchaRef = useRef();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const [redirecting, setRedirecting] = useState(false);\n  const [redirectDestination, setRedirectDestination] = useState(\"\");\n\n  const SUCCESS_MESSAGE_TIMEOUT = 2000;\n  const REDIRECT_ANIMATION_TIMEOUT = 2000;\n\n  const handleRedirect = useCallback(() => {\n    setRedirecting(false);\n\n    setTimeout(() => {\n      try {\n        const currentUserType = parseInt(userType, 10);\n        if (currentUserType === 1) {\n          setRedirectDestination(\"Company\");\n        } else {\n          setRedirectDestination(\"User\");\n        }\n      } catch (e) {\n        setRedirectDestination(\"User\");\n      }\n\n      setRedirecting(true);\n\n      setTimeout(() => {\n        try {\n          const currentUserType = parseInt(userType, 10);\n          if (currentUserType === 1) {\n            navigate(\"/company-dashboard\");\n          } else {\n            navigate(\"/user-dashboard\");\n          }\n        } catch (e) {\n          navigate(\"/user-dashboard\");\n        }\n      }, REDIRECT_ANIMATION_TIMEOUT);\n    }, SUCCESS_MESSAGE_TIMEOUT);\n  }, [userType, navigate, setRedirecting, setRedirectDestination]);\n\n  const verifyEmailWithToken = useCallback(async (token, userId, email) => {\n    try {\n      setVerificationStatus(\"pending\");\n      setMessage(\"Verifying your email... Please wait.\");\n\n      const response = await axios.get(\n        getApiUrl(\"api/accounts/verify-email/\"),\n        {\n          params: {\n            token,\n            ...(userId && { user_id: userId }),\n            ...(email && { email }),\n          },\n        }\n      );\n\n      if (response.data && response.data.success) {\n        setVerificationStatus(\"success\");\n\n        if (response.data.user && response.data.user.user_type) {\n          setUserType(response.data.user.user_type);\n        }\n\n        handleRedirect();\n      } else {\n        setVerificationStatus(\"error\");\n        setErrorMessage(\n          response.data?.error ||\n            \"Verification failed for an unknown reason.\"\n        );\n        toast.error(\"Verification error\");\n      }\n    } catch (error) {\n      console.error(\n        \"Error verifying email:\",\n        error.response?.data || error.message\n      );\n\n      if (\n        error.response?.data?.error &&\n        (error.response.data.error.includes(\"already verified\") ||\n          error.response.data.error.includes(\"already verified\"))\n      ) {\n        setVerificationStatus(\"success\");\n        handleRedirect();\n        return;\n      }\n\n      setVerificationStatus(\"error\");\n      setErrorMessage(\n        error.response?.data?.error ||\n          \"An error occurred during verification.\"\n      );\n      toast.error(\n        \"Error: \" + (error.response?.data?.error || \"Unknown error\")\n      );\n    }\n  }, [setVerificationStatus, setMessage, setUserType, setErrorMessage, handleRedirect]);\n\n  const getRecaptchaKey = useCallback(async (retryCount = 0) => {\n    try {\n      const response = await axios.get(getApiUrl(\"api/accounts/recaptcha-key/\"));\n      setRecaptchaKey(response.data.key);\n    } catch (error) {\n      console.error(\"Error getting reCAPTCHA key:\", error);\n      if (retryCount < 3) {\n        setTimeout(() => {\n          getRecaptchaKey(retryCount + 1);\n        }, Math.pow(2, retryCount) * 1000);\n      } else {\n        toast.error(\"Could not load security verification. Please reload the page.\");\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (showCaptcha && !recaptchaKey) {\n      getRecaptchaKey();\n    }\n  }, [showCaptcha, recaptchaKey, getRecaptchaKey]);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const token = queryParams.get(\"token\");\n    const queryUserId = queryParams.get(\"user_id\") || queryParams.get(\"uid\");\n    const queryEmail = queryParams.get(\"email\");\n    const queryUserType = queryParams.get(\"user_type\");\n\n    if (queryEmail) {\n      setUserEmail(queryEmail);\n      Cookies.set('verificationEmail', queryEmail);\n    } else {\n      const savedEmail = Cookies.get('verificationEmail');\n      if (savedEmail) {\n        setUserEmail(savedEmail);\n      }\n    }\n\n    setUserId(queryUserId || \"\");\n    setUserType(queryUserType || \"\");\n\n    if (token) {\n      setVerificationStatus(\"pending\");\n      setMessage(\"Verifying your email...\");\n\n      setTimeout(() => {\n        verifyEmailWithToken(token, queryUserId, queryEmail);\n      }, 500);\n    } else {\n      setVerificationStatus(\"waiting\");\n    }\n  }, [location, verifyEmailWithToken]);\n\n  const validateCode = (code) => {\n    const codeRegex = /^\\d{6}$/;\n    if (!code) {\n      setCodeError(\"Code is required\");\n      return false;\n    }\n    if (!codeRegex.test(code)) {\n      setCodeError(\"Code must be 6 numeric digits\");\n      return false;\n    }\n    setCodeError(\"\");\n    return true;\n  };\n\n  const handleCodeChange = (e) => {\n    const code = e.target.value;\n    setManualCode(code);\n    if (code.length === 6) {\n      validateCode(code);\n    } else {\n      setCodeError(\"\");\n    }\n  };\n\n  useEffect(() => {\n    let timer;\n    if (resendTimer > 0) {\n      timer = setInterval(() => {\n        setResendTimer((prev) => prev - 1);\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [resendTimer]);\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleResendEmail = async () => {\n    const emailToUse = userEmail || Cookies.get('verificationEmail');\n\n    if (!emailToUse) {\n      toast.error(\"Could not determine your email. Please enter your email or log in again.\");\n      return;\n    }\n\n    if (resendingEmail) {\n      return;\n    }\n\n    setResendingEmail(true);\n\n    try {\n      const response = await axios.post(\n        getApiUrl(\"api/accounts/resend-verification-email/\"),\n        { email: emailToUse }\n      );\n\n      if (response.data && response.data.success) {\n        toast.success(\"Verification email resent. Please check your inbox.\");\n        setResendTimer(60);\n      } else {\n        toast.error(response.data?.error || \"Error resending email\");\n      }\n    } catch (error) {\n      if (error.response?.status === 429) {\n        toast.error(\"Too many resend attempts. Please try again later.\");\n      } else {\n        toast.error(error.response?.data?.error || \"Error resending verification email\");\n      }\n    } finally {\n      setResendingEmail(false);\n    }\n  };\n\n  const handleCaptchaChange = async (token) => {\n    if (!token) {\n      console.error(\"Invalid CAPTCHA token\");\n      if (recaptchaRef.current) {\n        recaptchaRef.current.reset();\n      }\n      setCaptchaToken(\"\");\n      return;\n    }\n\n    try {\n      setCaptchaToken(token);\n      setRemainingAttempts(3);\n      setExtraAttemptsUsed(true);\n      setShowCaptcha(false);\n      toast.success(\"Verification successful. You have 3 additional attempts.\");\n    } catch (error) {\n      console.error(\"Error in CAPTCHA verification:\", error);\n      if (recaptchaRef.current) {\n        recaptchaRef.current.reset();\n      }\n      setCaptchaToken(\"\");\n      toast.error(\"Verification error. Please try again.\");\n      \n      getRecaptchaKey();\n    }\n  };\n\n  const handleManualVerification = async (e) => {\n    e.preventDefault();\n    \n    if (!validateCode(manualCode)) {\n      return;\n    }\n\n    if (showCaptcha && !captchaToken) {\n      toast.warning(\"Please complete the security verification to continue\");\n      return;\n    }\n\n    setVerificationStatus(\"pending\");\n\n    try {\n      const emailToUse = userEmail || Cookies.get('verificationEmail');\n      \n      if (!emailToUse) {\n        toast.error(\"Could not determine email. Please try again.\");\n        return;\n      }\n\n      console.log('Sending verification request:', {\n        token: manualCode,\n        email: emailToUse,\n        userId,\n        captchaToken\n      });\n\n      const response = await axios.get(\n        getApiUrl(\"api/accounts/verify-email/\"),\n        {\n          params: {\n            token: manualCode.trim(),\n            email: emailToUse.trim(),\n            ...(userId && { user_id: userId }),\n            ...(captchaToken && { recaptcha_token: captchaToken }),\n          },\n        }\n      );\n\n      if (response.data && response.data.success) {\n        setVerificationStatus(\"success\");\n        if (response.data.user?.user_type) {\n          setUserType(response.data.user.user_type);\n        }\n        handleRedirect();\n      } else {\n        setVerificationStatus(\"error\");\n        setErrorMessage(response.data?.error || \"Verification failed for an unknown reason.\");\n        toast.error(\"Verification error\");\n      }\n    } catch (error) {\n      console.error('Verification error:', error.response?.data || error);\n      setVerificationStatus(\"error\");\n      setManualCode(\"\");\n      \n      if (extraAttemptsUsed && remainingAttempts <= 1) {\n        setResendTimer(3600);\n        setErrorMessage(\"You have exceeded the maximum number of allowed attempts. For your security, verification has been temporarily blocked.\");\n        setRemainingAttempts(0);\n        toast.error(\"Verification blocked for security\");\n        return;\n      }\n\n      const newAttempts = remainingAttempts - 1;\n      setRemainingAttempts(newAttempts);\n\n      if (!extraAttemptsUsed && newAttempts > 0) {\n        setErrorMessage(\"The entered code is not valid. Please verify and try again.\");\n        toast.error(\"Incorrect code\");\n      } else if (newAttempts === 0 && !extraAttemptsUsed) {\n        setShowCaptcha(true);\n        setErrorMessage(\"You have used all your initial attempts. Complete the security verification to continue.\");\n        toast.warning(\"Additional verification required\");\n        if (!recaptchaKey) {\n          getRecaptchaKey();\n        }\n      } else {\n        setErrorMessage(error.response?.data?.error || \"The entered code is not valid. Please verify and try again.\");\n        toast.error(\"Incorrect code\");\n      }\n\n      if (recaptchaRef.current) {\n        recaptchaRef.current.reset();\n        setCaptchaToken(\"\");\n      }\n    }\n  };\n\n  const renderAttemptsMessage = () => {\n    if (remainingAttempts === 0 && extraAttemptsUsed) {\n      return (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4 mb-4\">\n          <div className=\"flex items-center\">\n            <svg className=\"h-5 w-5 text-red-400 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <p className=\"text-red-700 font-medium\">Access temporarily blocked</p>\n              <p className=\"text-red-600 text-sm mt-1\">\n                You have exceeded the maximum number of attempts. Please try again later.\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    \n    if (remainingAttempts === 0 && !extraAttemptsUsed) {\n      return (\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-4\">\n          <div className=\"flex items-center\">\n            <svg className=\"h-5 w-5 text-yellow-400 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <p className=\"text-yellow-800 font-medium\">Additional verification required</p>\n              <p className=\"text-yellow-700 text-sm mt-1\">\n                You have used all your initial attempts. Please complete the CAPTCHA.\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    \n    if (remainingAttempts > 0 && extraAttemptsUsed) {\n      return (\n        <div className=\"bg-blue-50 border border-blue-200 border rounded-md p-4 mb-4\">\n          <div className=\"flex items-center\">\n            <svg className=\"h-5 w-5 text-blue-400 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <p className=\"text-blue-800 font-medium\">Available attempts</p>\n              <p className=\"text-blue-700 text-sm mt-1\">\n                You have {remainingAttempts} {remainingAttempts === 1 ? 'attempt' : 'attempts'} remaining to verify your code\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const renderCaptcha = () => {\n    if (!recaptchaKey) return null;\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"bg-gray-50 border border-gray-200 rounded-md p-4\">\n          <div className=\"flex items-center mb-3\">\n            <svg className=\"h-5 w-5 text-gray-400 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            <p className=\"text-gray-700 font-medium\">Security verification</p>\n          </div>\n          <p className=\"text-gray-600 text-sm mb-4\">\n            Please complete the following CAPTCHA to confirm you are a person.\n          </p>\n          <div className=\"flex justify-center\">\n            <ReCAPTCHA\n              ref={recaptchaRef}\n              sitekey={recaptchaKey}\n              onChange={handleCaptchaChange}\n              theme=\"light\"\n              size=\"normal\"\n              hl=\"en\"\n              onExpired={() => {\n                setCaptchaToken(\"\");\n                if (recaptchaRef.current) {\n                  recaptchaRef.current.reset();\n                }\n                toast.warning(\"Verification has expired. Please complete the CAPTCHA again.\");\n              }}\n              onErrored={(err) => {\n                console.error(\"Error in reCAPTCHA:\", err);\n                setCaptchaToken(\"\");\n                if (recaptchaRef.current) {\n                  recaptchaRef.current.reset();\n                }\n                getRecaptchaKey();\n                toast.error(\"Verification error. Attempting to reload CAPTCHA...\");\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderManualVerificationForm = () => (\n    <div className=\"mt-6 border-t pt-6\">\n      <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n        Code verification\n      </h3>\n      <p className=\"text-sm text-gray-600 mb-4\">\n        Enter the 6-character code you received in your email\n      </p>\n      <form onSubmit={handleManualVerification} className=\"space-y-4\">\n        <div>\n          <input\n            type=\"text\"\n            id=\"code\"\n            value={manualCode}\n            onChange={handleCodeChange}\n            className={`w-full px-3 py-2 border rounded-md ${\n              codeError ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Enter verification code\"\n            maxLength={6}\n            autoFocus\n          />\n          {codeError && (\n            <p className=\"mt-1 text-sm text-red-600\">{codeError}</p>\n          )}\n        </div>\n\n        {remainingAttempts < 3 && userEmail && (\n          <div className=\"mb-6 p-4 bg-gray-100 rounded-md\">\n            <p className=\"text-sm font-medium text-gray-700 mb-2\">\n              Detected email:\n            </p>\n            <p className=\"font-medium text-indigo-600 mb-3\">{userEmail}</p>\n            <div className=\"mt-2\">\n              <button\n                type=\"button\"\n                onClick={handleResendEmail}\n                disabled={resendTimer > 0 || resendingEmail}\n                className={`w-full bg-indigo-600 text-white px-3 py-2 rounded-md hover:bg-indigo-700 ${\n                  resendTimer > 0 || resendingEmail ? \"opacity-50 cursor-not-allowed\" : \"\"\n                }`}\n              >\n                {resendTimer > 0\n                  ? `Resend code in ${formatTime(resendTimer)}`\n                  : resendingEmail\n                  ? \"Sending...\"\n                  : \"Resend verification code\"}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {showCaptcha && (\n          <div className=\"flex justify-center my-4\">\n            {renderCaptcha()}\n          </div>\n        )}\n\n        {renderAttemptsMessage()}\n\n        <button\n          type=\"submit\"\n          disabled={!!codeError || (showCaptcha && !captchaToken && !extraAttemptsUsed) || (remainingAttempts === 0 && extraAttemptsUsed)}\n          className={`w-full font-medium py-2 px-4 rounded-md ${\n            codeError || (showCaptcha && !captchaToken && !extraAttemptsUsed) || (remainingAttempts === 0 && extraAttemptsUsed)\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-indigo-600 hover:bg-indigo-700 text-white'\n          }`}\n        >\n          Verify email\n        </button>\n      </form>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (verificationStatus) {\n      case \"success\":\n        return (\n          <div className=\"text-center\">\n            <div className=\"mb-6\">\n              <svg\n                className=\"w-16 h-16 text-green-500 mx-auto\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M5 13l4 4L19 7\"\n                ></path>\n              </svg>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Email verified successfully!\n            </h2>\n            <p className=\"text-gray-600 mb-4\">\n              Your account has been verified. You can now access all platform features.\n            </p>\n\n            {userEmail && (\n              <div className=\"mb-6 p-3 bg-gray-50 border border-gray-100 rounded-md\">\n                <p className=\"text-sm text-gray-700\">Account verified for:</p>\n                <p className=\"font-medium text-indigo-600\">{userEmail}</p>\n              </div>\n            )}\n\n            {redirecting && (\n              <div className=\"mt-4 py-2 px-4 bg-gray-100 rounded-md\">\n                <p className=\"text-gray-700\">\n                  Redirecting to {redirectDestination} dashboard...\n                </p>\n                <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2.5\">\n                  <div className=\"bg-indigo-600 h-2.5 rounded-full animate-pulse w-full\"></div>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case \"error\":\n        return (\n          <div className=\"text-center\">\n            <div className=\"mb-6\">\n              <svg\n                className=\"w-16 h-16 text-red-500 mx-auto\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M6 18L18 6M6 6l12 12\"\n                ></path>\n              </svg>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Verification Error\n            </h2>\n            <p className=\"text-red-600 mb-4\">{errorMessage}</p>\n\n            {renderManualVerificationForm()}\n\n            <div className=\"mt-4\">\n              <Link to=\"/login\" className=\"text-indigo-600 hover:text-indigo-800 font-medium\">\n                Return to login\n              </Link>\n            </div>\n          </div>\n        );\n\n      case \"waiting\":\n        return (\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Email Verification\n            </h2>\n            <p className=\"text-gray-600 mb-6\">\n              We have sent an email with a verification link and code.\n            </p>\n\n            {renderManualVerificationForm()}\n\n            <div className=\"mt-4\">\n                <Link\n                  to=\"/login\"\n                  className=\"text-indigo-600 hover:text-indigo-800 font-medium\"\n                >\n                  Return to login\n                </Link>\n            </div>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto\"></div>\n            <p className=\"mt-4 text-gray-600 mb-2\">\n              {message || \"Verifying your email...\"}\n            </p>\n\n            {userEmail && (\n              <p className=\"text-sm text-gray-500\">\n                Verifying account:{\" \"}\n                <span className=\"font-medium\">{userEmail}</span>\n              </p>\n            )}\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4 py-12\">\n      <div className=\"max-w-md w-full bg-white shadow-lg rounded-lg p-8\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default EmailVerification;\n","import React from \"react\";\nimport EmailVerificationComp from \"../templates/EmailVerification\";\n\nconst EmailVerification = () => {\n  return <EmailVerificationComp />;\n};\n\nexport default EmailVerification;\n"],"names":["EmailVerification","verificationStatus","setVerificationStatus","useState","errorMessage","setErrorMessage","userEmail","setUserEmail","userId","setUserId","userType","setUserType","manualCode","setManualCode","resendingEmail","setResendingEmail","message","setMessage","resendTimer","setResendTimer","codeError","setCodeError","remainingAttempts","setRemainingAttempts","showCaptcha","setShowCaptcha","captchaToken","setCaptchaToken","recaptchaKey","setRecaptchaKey","extraAttemptsUsed","setExtraAttemptsUsed","recaptchaRef","useRef","location","useLocation","navigate","useNavigate","redirecting","setRedirecting","redirectDestination","setRedirectDestination","handleRedirect","useCallback","setTimeout","currentUserType","parseInt","e","verifyEmailWithToken","async","token","email","response","axios","get","getApiUrl","params","user_id","_response$data","data","success","user","user_type","error","toast","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","includes","getRecaptchaKey","retryCount","arguments","length","undefined","key","Math","pow","useEffect","queryParams","URLSearchParams","search","queryUserId","queryEmail","queryUserType","Cookies","set","savedEmail","validateCode","code","test","handleCodeChange","target","value","timer","setInterval","prev","clearInterval","handleResendEmail","emailToUse","post","_response$data2","_error$response5","_error$response6","_error$response6$data","status","handleCaptchaChange","current","reset","handleManualVerification","preventDefault","log","trim","recaptcha_token","_response$data$user","_response$data3","_error$response7","newAttempts","_error$response8","_error$response8$data","warning","renderManualVerificationForm","_jsxs","className","children","_jsx","onSubmit","type","id","onChange","placeholder","maxLength","autoFocus","onClick","disabled","seconds","floor","toString","padStart","xmlns","viewBox","fill","fillRule","d","clipRule","ReCAPTCHA","ref","sitekey","theme","size","hl","onExpired","onErrored","err","renderContent","stroke","strokeLinecap","strokeLinejoin","strokeWidth","Link","to","EmailVerificationComp"],"sourceRoot":""}